version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: 'secret'
          MYSQL_DATABASE: 'gigwerk_testing'
          MYSQL_USER: 'homestead'
          MYSQL_PASSWORD: 'secret'
    steps:
      - checkout
      - run:
          name: Install VM Dependencies
          command: 'sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev libpng-dev redis-server'
      - run:
          name: Prepare PHP Extenstions
          command: 'sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd'
      - run:
          name: Install PHP Extenstions
          command: 'sudo docker-php-ext-install zip mysqli pdo_mysql pdo_sqlite redis'
      - run:
          name: Install PHP Photo Extenstion
          command: 'sudo docker-php-ext-install -j$(nproc) gd'
      - run:
          name: Start Redis
          command: 'sudo service redis-server start'
      - run:
          name: Install MySQL Client
          command: 'sudo apt-get install mariadb-client'
      - run:
          name: Install MySQL Server
          command: 'sudo apt-get -y install mariadb-server'
      # Download and cache dependencies
      # composer cache
      - restore_cache:
          keys:
            # "composer.json" can be used if "composer.json"
            # is not committed to the repository.
            - v1-dependencies-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install Composer Dependencies
          command: 'composer install -n --prefer-dist'
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run:
          name: Install Node Modules
          command: 'npm install'
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn
      # prepare the database
      - run:
          name: Create Env File
          command: 'cp .env.testing .env'
      - run:
          name: Migrate Database
          command: 'php artisan migrate --env=testing --seed --force'
      # run tests & static analysis
      - run:
          name: PHPUnit Tests
          command: './vendor/bin/phpunit'
      - run:
          name: PHPStan Analysis
          command: './vendor/bin/phpstan analyse --memory-limit=2G'
      # store test results
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output
  staging-deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy Script
          command: curl --location --request POST 'https://ploi.io/webhooks/servers/8623/sites/16831/deploy?token=QT0Mqu6sgp2qDbL1XeiiChxfm599m2daATYA1hmWPUGJcTQ96R'
workflows:
  version: 2
  build:
    jobs:
      - build
      - staging-deploy:
          requires:
            - build
          filters:
            branches:
              only: master
