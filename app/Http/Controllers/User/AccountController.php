<?php

namespace App\Http\Controllers\User;

use App\Factories\ResponseFactory;
use App\Http\Controllers\Controller;
use App\Models\Business;
use App\Models\User;
use Illuminate\Http\Request;
use Solomon04\Documentation\Annotation\BodyParam;
use Solomon04\Documentation\Annotation\Group;
use Solomon04\Documentation\Annotation\Meta;
use Solomon04\Documentation\Annotation\ResponseExample;

/**
 * @Group(name="Account", description="Manage a users account and settings.")
 */
class AccountController extends Controller
{
    /**
     * @Meta(name="Save APN Token", href="apn-token", description="Save a users apn token so they can receive push notifications via iPhone.")
     * @BodyParam(name="token", type="string", status="required", description="The apn token generated by Apple")
     * @ResponseExample(status=200, example="responses/user/account/save.apn.token-200.json")
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Validation\ValidationException
     */
    public function updateApnToken(Request $request)
    {
        /** @var User $user */
        $user = $request->user();
        /** @var Business $business */
        $business = $request->get('business');
        $this->validate($request, [
            'token' => ['required']
        ]);

        $business->users()->updateExistingPivot($user, ['apn_token' => $request->token]);

        return ResponseFactory::success('APN token has been saved.');
    }

    /**
     * @Meta(name="Save FCM Token", href="fcm-token", description="Save a users fcm token so they can receive push notifications via android.")
     * @BodyParam(name="token", type="string", status="required", description="The fcm token generated by an Android")
     * @ResponseExample(status=200, example="responses/user/account/save.fcm.token-200.json")
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Validation\ValidationException
     */
    public function updateFcmToken(Request $request)
    {
        /** @var User $user */
        $user = $request->user();
        /** @var Business $business */
        $business = $request->get('business');
        $this->validate($request, [
            'token' => ['required']
        ]);

        $business->users()->updateExistingPivot($user, ['fcm_token' => $request->token]);

        return ResponseFactory::success('FCM token has been saved.');
    }

    /**
     * @Meta(name="Update Notification Preferences", href="update-preferences", description="Update a users notification preferences within a business app.")
     * @BodyParam(name="email_notifications", type="boolean", status="optional", description="Check if user wants to opt into email notifications")
     * @BodyParam(name="sms_notifications", type="boolean", status="optional", description="Check if user wants to opt into sms notifications")
     * @BodyParam(name="push_notifications", type="boolean", status="optional", description="Check if user wants to opt into push notifications")
     * @ResponseExample(status=200, example="responses/user/account/update.notification.preferences-200.json")
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Validation\ValidationException
     */
    public function updateNotificationPreferences(Request $request)
    {
        /** @var User $user */
        $user = $request->user();
        /** @var Business $business */
        $business = $request->get('business');

        $this->validate($request, [
            'email_notifications' => ['boolean'],
            'sms_notifications' => ['boolean'],
            'push_notifications' => ['boolean']
        ]);

        if ($request->has('email_notifications')) {
            $business->users()->updateExistingPivot($user,['email_notifications' => $request->email_notifications]);
        }

        if ($request->has('sms_notifications')) {
            $business->users()->updateExistingPivot($user,['sms_notifications' => $request->sms_notifications]);
        }

        if ($request->has('push_notifications')) {
            $business->users()->updateExistingPivot($user,['push_notifications' => $request->push_notifications]);
        }

        return ResponseFactory::success('Your notification settings have been updated');
    }
}
